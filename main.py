from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaDocument
from aiogram.utils import executor
from telegram_bot_calendar import LSTEP, WMonthTelegramCalendar
from utils import UserStates
import threading
import time
import io
import datetime
from urllib.request import urlopen
import json
import sqlite3

TOKEN = '1931110131:AAHr3e9d0d_04URAnHs-v69pej5E65_AZzs'

admin_id = 951299049
config_id = 99

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

user_state = {}

conn = sqlite3.connect(":memory:")  # –∏–ª–∏ :memory: —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ RAM
cursor = conn.cursor()
cursor.execute("CREATE TABLE users (chatid INTEGER , name TEXT, date INTEGER, timestart INTEGER, timeend INTEGER)")


class User:
    def __init__(self):
        self.date = 'None'
        self.fullname = 'None'
        self.timestart = None
        self.timeend = None


# #--------------------–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö-------------------------
async def get_data():
    to = time.time()
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ –∫ –∞–¥–º–∏–Ω—É
    forward_data = await bot.forward_message(admin_id, admin_id, config_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å–ª–∞–ª–∏
    file_data = await bot.get_file(forward_data.document.file_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–æ url
    file_url_data = bot.get_file_url(file_data.file_path)

    # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞
    json_file = urlopen(file_url_data).read()
    print('–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–∫–∞–ø–∞ :=' + str(time.time() - to))
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ json –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    return json.loads(json_file)


# --------------------–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö-------------------------
async def save_data():
    to = time.time()
    sql = "SELECT * FROM users "
    cursor.execute(sql)
    data = cursor.fetchall()  # or use fetchone()
    try:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É
        str_data = json.dumps(data)

        # –û–±–Ω–æ–≤–ª—è–µ–º  –Ω–∞—à —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        await bot.edit_message_media(InputMediaDocument(io.StringIO(str_data)), admin_id, config_id)

    except Exception as ex:
        print(ex)
    print('–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∫–∞–ø–∞:=' + str(time.time() - to))

#------------------------------–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ-----------------------------------------

@dp.callback_query_handler(lambda c: c.data == 'buttontime', state=UserStates.USER_STATE_0)
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')

#------------------------------–ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å—å------------------------------------------------

@dp.callback_query_handler(lambda c: c.data == 'buttonzapis', state=UserStates.USER_STATE_0)
async def process_callback_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[1])
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û.', )

# -------------------–í—ã–±–æ—Ä –¥–∞—Ç—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑------------------------------------------------

@dp.callback_query_handler(WMonthTelegramCalendar.func(), state=UserStates.USER_STATE_2)
async def inline_kb_answer_callback_handler(query):
    result, key, step = WMonthTelegramCalendar().process(query.data)

    if not result and key:
        await bot.edit_message_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                                    query.message.chat.id,
                                    query.message.message_id,
                                    reply_markup=key)
    elif result:
        today = int(datetime.datetime.now().strftime("%Y%m%d"))
        resultInt = int(str(result).replace("-", ""))
        if resultInt >= today:
            userC = user_state[query.from_user.id]
            userC.date = resultInt
            state = dp.current_state(user=query.from_user.id)

            await state.set_state(UserStates.all()[3])
            await bot.send_message(query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result} \n –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞–ª–∞. –í —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞")
        else:
            await bot.send_message(query.from_user.id, "‚ùå –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ ‚ùå")
            calendar, step = WMonthTelegramCalendar().build()
            await bot.send_message(query.from_user.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=calendar)

@dp.message_handler(commands=['1'], state='*')
async def start(message):
    sql = "SELECT * FROM users "
    cursor.execute(sql)
    data = cursor.fetchall()
    str_data = json.dumps(data)
    await bot.send_message(message.from_user.id, str_data)


@dp.message_handler(commands=['start'],state='*')
async def process_start_command(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(UserStates.all()[0])
    button = InlineKeyboardButton('–ü–æ—Å–º–æ—Ç–µ—Ä—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ', callback_data='buttontime')
    button2 = InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è üìù', callback_data='buttonzapis')
    kb = InlineKeyboardMarkup().add(button).add(button2)
    await bot.send_message(message.from_user.id,
                           "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–≠—Ç–æ –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ë–ù–ü –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.",
                           reply_markup=kb)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await bot.send_message(message.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–≠—Ç–æ –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ë–ù–ü –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n ")

#------------–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø, –≤—ã–±–æ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã, –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É, –ø—Ä–æ–≤–µ—Ä–∫–∏ --------------------------

@dp.message_handler(state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    if userC.timestart < message.text and int(message.text) > 0 and int(message.text) < 25:
        userC.timeend = message.text
        sql_check = "SELECT * FROM users where date={}".format(userC.date)
        cursor.execute(sql_check)
        newlist = cursor.fetchall()
        dbg = ''.join(str(e) for e in newlist)
        print('DBG newlist' + dbg + ' ' + str(userC.date))
        checkpoint = False
        for elem in newlist:
            i = elem[3]
            print('DBG elem ' + str(i))
            while i <= elem[4]:
                print('DBG elem ' + str(i))
                if str(i) == str(userC.timestart) or str(i) == str(userC.timeend):
                    await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ —Å ' + str(elem[3]) + ' –¥–æ ' + str(elem[4]) + '\n–≠—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º -' + elem[1], reply=False)
                    checkpoint = True
                    break
                else:
                    i = i + 1
        if checkpoint == False:
            sql_insert = "INSERT INTO users VALUES ('{}', '{}', '{}', '{}','{}')".format(message.from_user.id, userC.fullname,
                                                                                   userC.date, userC.timestart,
                                                                                   userC.timeend)
            cursor.execute(sql_insert)
            state = dp.current_state(user=message.from_user.id)
            dateOut = str(userC.date)
            dateOut = dateOut[:4] + '-' + dateOut[4:6] + '-' + dateOut[6:]
            await state.set_state(UserStates.all()[0])
            await message.reply('{}, –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã {} c {} –¥–æ {}'.format(userC.fullname, dateOut, userC.timestart, userC.timeend), reply=False)

        elif checkpoint == True:
            button = InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É üìÖ', callback_data='buttondatehange')
            button2 = InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è ‚è∞', callback_data='buttontimechange')
            kb = InlineKeyboardMarkup().add(button).add(button2)
            await bot.send_message(message.from_user.id,
                                   "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?",
                                   reply_markup=kb)
    else:
        await message.reply('‚ùó –ß–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —á–∞—Å—É –Ω–∞—á–∞–ª–∞. ‚ùó'
                            '\n‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚ùó', reply=False)

@dp.callback_query_handler(lambda c: c.data == 'buttontimechange', state=UserStates.USER_STATE_4)
async def process_callback_button2(callback_query: types.CallbackQuery):
    userC = user_state[callback_query.from_user.id]
    userC.timeend = None
    userC.timestart = None
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[3])
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞', )

@dp.callback_query_handler(lambda c: c.data == 'buttondatehange', state=UserStates.USER_STATE_4)
async def process_callback_button2(callback_query: types.CallbackQuery):
    userC = user_state[callback_query.from_user.id]
    userC.timeend = None
    userC.timestart = None
    userC.date = None
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[2])
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É üìÖ')
    calendar, step = WMonthTelegramCalendar().build()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=calendar)


#--------------–í–≤–æ–¥ —á–∞—Å–∞ –Ω–∞—á–∞–ª–∞-----------------------------------------------------------
@dp.message_handler(state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    if int(message.text) > 0 and int(message.text) < 25:
        userC.timestart = message.text
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(UserStates.all()[4])
        await message.reply('–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞', reply=False)
    else:
        await message.reply('‚ùó –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚ùó', reply=False)


@dp.message_handler(state=UserStates.USER_STATE_1)
async def first_test_state_case_met(message: types.Message):
    user_state[message.from_user.id] = User()
    userC = user_state[message.from_user.id]
    userC.fullname = message.text
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(UserStates.all()[2])
    await message.reply('–°–ø–∞—Å–∏–±–æ, ' + message.text + '\n–¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É üìÖ', reply=False)
    calendar, step = WMonthTelegramCalendar().build()
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=calendar)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
