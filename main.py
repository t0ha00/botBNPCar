from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaDocument
from aiogram.utils import executor
from telegram_bot_calendar import LSTEP, WMonthTelegramCalendar
from utils import UserStates
import prettytable as pt
import xlsxwriter
import threading
import time
import io
import datetime
from urllib.request import urlopen
import json
import sqlite3

TOKEN = '1931110131:AAHr3e9d0d_04URAnHs-v69pej5E65_AZzs'
DEF_ARR_TIMES = ['9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00']

admin_id = 951299049
config_id = 99

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

conn = sqlite3.connect(":memory:")  # –∏–ª–∏ :memory: —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ RAM
cursor = conn.cursor()
cursor.execute("CREATE TABLE users (chatid INTEGER , name TEXT, date INTEGER, timestart INTEGER, timeend INTEGER)")


class User:
    def __init__(self):
        self.date = None
        self.fullname = None
        self.timestart = None
        self.timeend = None


arr_times = ['9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00']
user_state = {}
arr_time_start = []
arr_time_end = []


# #--------------------–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö-------------------------
async def get_data():
    to = time.time()
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ –∫ –∞–¥–º–∏–Ω—É
    forward_data = await bot.forward_message(admin_id, admin_id, config_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å–ª–∞–ª–∏
    file_data = await bot.get_file(forward_data.document.file_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–æ url
    file_url_data = bot.get_file_url(file_data.file_path)

    # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞
    json_file = urlopen(file_url_data).read()
    print('–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–∫–∞–ø–∞ :=' + str(time.time() - to))
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ json –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    return json.loads(json_file)


# --------------------–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö-------------------------
async def save_data():
    to = time.time()
    sql = "SELECT * FROM users "
    cursor.execute(sql)
    data = cursor.fetchall()  # or use fetchone()
    try:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É
        str_data = json.dumps(data)

        # –û–±–Ω–æ–≤–ª—è–µ–º  –Ω–∞—à —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        await bot.edit_message_media(InputMediaDocument(io.StringIO(str_data)), admin_id, config_id)

    except Exception as ex:
        print(ex)
    print('–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∫–∞–ø–∞:=' + str(time.time() - to))


# ------------------------------–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ-----------------------------------------

# -----------------------------–í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è----------------------------------

@dp.callback_query_handler(lambda c: c.data == 'buttontime', state=UserStates.USER_STATE_0)
async def process_callback_button1(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[5])
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text='–û—Ç—á–µ—Ç –ø–æ –∏–º–µ–Ω–∏', callback_data='table_name'),
              types.InlineKeyboardButton(text='–û—Ç—á–µ—Ç –ø–æ –¥–∞—Ç–µ', callback_data='table_date'),
              types.InlineKeyboardButton(text='–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data='table_full')]
    markup.add(*button)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ö–∞–∫–æ–π –æ—Ç—á–µ—Ç –Ω—É–∂–µ–Ω ?', reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == 'table_name', state=UserStates.USER_STATE_TABLE_0)
async def process_callback_button1(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[6])
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text='–§–∞–π–ª–æ–º üìÑ', callback_data='file_name'),
              types.InlineKeyboardButton(text='–°–æ–æ–±—â–µ–Ω–∏–µ–º üì®', callback_data='message_name')]
    markup.add(*button)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞–∏—Ç—å –æ—Ç—á–µ—Ç', reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == 'file_name', state=UserStates.USER_STATE_TABLE_1,)
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[7])
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û.')

@dp.callback_query_handler(lambda c: c.data == 'message_name', state=UserStates.USER_STATE_TABLE_1,)
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[8])
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û.')

@dp.message_handler(state=UserStates.USER_STATE_TABLE_2)
async def process_callback_button1(message: types.Message):
    name = '\"' + message.text + '\"'
    sql_select = "SELECT * FROM users where name={}".format(name)
    cursor.execute(sql_select)
    resultlist = cursor.fetchall()
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(UserStates.all()[0])
    if not resultlist:
        await bot.send_message(message.from_user.id, '–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞')
    else:
        workbook = xlsxwriter.Workbook(message.text + '.xlsx')
        worksheet = workbook.add_worksheet()
        worksheet.write(0, 0, '–î–∞—Ç–∞')
        worksheet.write(0, 1, '–í—Ä–µ–º—è')
        count = 1
        for elem in resultlist:
            dateOut = str(elem[2])
            dateOut = dateOut[:4] + '-' + dateOut[4:6] + '-' + dateOut[6:]
            worksheet.write(count, 0, dateOut)
            worksheet.write(count, 1, 'c ' + DEF_ARR_TIMES[elem[3]] + ' –¥–æ ' + DEF_ARR_TIMES[elem[4]])
            count += 1
        workbook.close()
        f = open('./' + message.text + '.xlsx', 'rb')
        await bot.send_document(message.from_user.id, f)

@dp.message_handler(state=UserStates.USER_STATE_TABLE_3)
async def process_callback_button1(message: types.message):
    name = '\"' + message.text + '\"'
    sql_select = "SELECT * FROM users where name={}".format(name)
    cursor.execute(sql_select)
    resultlist = cursor.fetchall()
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(UserStates.all()[0])
    if not resultlist:
        await bot.send_message(message.from_user.id, '–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞')
    else:
        table = pt.PrettyTable(["–î–∞—Ç–∞", "–í—Ä–µ–º—è"])
        for elem in resultlist:
            dateOut = str(elem[2])
            dateOut = dateOut[:4] + '-' + dateOut[4:6] + '-' + dateOut[6:]
            table.add_row([dateOut, 'c ' + DEF_ARR_TIMES[elem[3]] + ' –¥–æ ' + DEF_ARR_TIMES[elem[4]]])
        await bot.send_message(message.from_user.id, f'<pre>{table}</pre>', parse_mode='html')

@dp.callback_query_handler(lambda c: c.data == 'table_date', state=UserStates.USER_STATE_TABLE_0)
async def process_callback_button1(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[9])
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text='–§–∞–π–ª–æ–º üìÑ', callback_data='file_date'),
              types.InlineKeyboardButton(text='–°–æ–æ–±—â–µ–Ω–∏–µ–º üì®', callback_data='message_date')]
    markup.add(*button)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞–∏—Ç—å –æ—Ç—á–µ—Ç', reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == 'file_date', state=UserStates.USER_STATE_TABLE_4,)
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[10])
    calendar, step = WMonthTelegramCalendar().build()
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=calendar)

@dp.callback_query_handler(lambda c: c.data == 'message_date', state=UserStates.USER_STATE_TABLE_4,)
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[11])
    calendar, step = WMonthTelegramCalendar().build()
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=calendar)

@dp.callback_query_handler(WMonthTelegramCalendar.func(), state=UserStates.USER_STATE_TABLE_5)
async def process_callback_button1(callback_query: types.CallbackQuery):
    result, key, step = WMonthTelegramCalendar().process(callback_query.data)
    if not result and key:
        await bot.edit_message_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id,
                                    reply_markup=key)
    elif result:
        resultInt = int(str(result).replace("-", ""))
        sql_check = "SELECT * FROM users where date={}".format(resultInt)
        cursor.execute(sql_check)
        resultlist = cursor.fetchall()
        state = dp.current_state(user=callback_query.from_user.id)
        await state.set_state(UserStates.all()[0])
        if not resultlist:
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(callback_query.from_user.id, '–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞')
        else:
            workbook = xlsxwriter.Workbook(str(result) + '.xlsx')
            worksheet = workbook.add_worksheet()
            worksheet.write(0, 0, '–ò–º—è')
            worksheet.write(0, 1, '–í—Ä–µ–º—è')
            count = 1
            for elem in resultlist:
                worksheet.write(count, 0, elem[1])
                worksheet.write(count, 1, 'c ' + DEF_ARR_TIMES[elem[3]] + ' –¥–æ ' + DEF_ARR_TIMES[elem[4]])
                count += 1
            workbook.close()
            f = open('./' + str(result) + '.xlsx', 'rb')
            await bot.send_document(callback_query.from_user.id, f)

@dp.callback_query_handler(WMonthTelegramCalendar.func(), state=UserStates.USER_STATE_TABLE_6)
async def process_callback_button1(callback_query: types.CallbackQuery):
    result, key, step = WMonthTelegramCalendar().process(callback_query.data)
    if not result and key:
        await bot.edit_message_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id,
                                    reply_markup=key)
    elif result:
        resultInt = int(str(result).replace("-", ""))
        sql_check = "SELECT * FROM users where date={}".format(resultInt)
        cursor.execute(sql_check)
        resultlist = cursor.fetchall()
        state = dp.current_state(user=callback_query.from_user.id)
        await state.set_state(UserStates.all()[0])
        if not resultlist:
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(callback_query.from_user.id, '–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞')
        else:
            table = pt.PrettyTable(["–ò–º—è", "–í—Ä–µ–º—è"])
            for elem in resultlist:
                table.add_row([elem[1], 'c ' + DEF_ARR_TIMES[elem[3]] + ' –¥–æ ' + DEF_ARR_TIMES[elem[4]]])
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(callback_query.from_user.id, f'<pre>{table}</pre>', parse_mode='html')

@dp.callback_query_handler(lambda c: c.data == 'table_full', state=UserStates.USER_STATE_TABLE_0)
async def process_callback_button1(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[12])
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text='–§–∞–π–ª–æ–º üìÑ', callback_data='file_full'),
              types.InlineKeyboardButton(text='–°–æ–æ–±—â–µ–Ω–∏–µ–º üì®', callback_data='message_full')]
    markup.add(*button)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞–∏—Ç—å –æ—Ç—á–µ—Ç', reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == 'file_full', state=UserStates.USER_STATE_TABLE_7)
async def process_callback_button1(callback_query: types.CallbackQuery):
    sql_check = "SELECT * FROM users"
    cursor.execute(sql_check)
    resultlist = cursor.fetchall()
    if not resultlist:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞')
    else:
        workbook = xlsxwriter.Workbook('full.xlsx')
        worksheet = workbook.add_worksheet()
        worksheet.write(0, 0, '–î–∞—Ç–∞')
        worksheet.write(0, 1, '–ò–º—è')
        worksheet.write(0, 3, '–í—Ä–µ–º—è')
        count = 1
        for elem in resultlist:
            dateOut = str(elem[2])
            dateOut = dateOut[:4] + '-' + dateOut[4:6] + '-' + dateOut[6:]
            worksheet.write(count, 0, dateOut)
            worksheet.write(count, 1, elem[1])
            worksheet.write(count, 2, 'c ' + DEF_ARR_TIMES[elem[3]] + ' –¥–æ ' + DEF_ARR_TIMES[elem[4]])
            count += 1
        workbook.close()
        f = open('./full.xlsx', 'rb')
        await bot.send_document(callback_query.from_user.id, f)

@dp.callback_query_handler(lambda c: c.data == 'message_full', state=UserStates.USER_STATE_TABLE_7)
async def process_callback_button1(callback_query: types.CallbackQuery):
    sql_check = "SELECT * FROM users"
    cursor.execute(sql_check)
    resultlist = cursor.fetchall()
    if not resultlist:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞')
    else:
        table = pt.PrettyTable(["–ò–º—è", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"])
        for elem in resultlist:
            dateOut = str(elem[2])
            dateOut = dateOut[:4] + '-' + dateOut[4:6] + '-' + dateOut[6:]
            table.add_row([elem[1], dateOut, 'c ' + DEF_ARR_TIMES[elem[3]] + ' –¥–æ ' + DEF_ARR_TIMES[elem[4]]])
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, f'<pre>{table}</pre>', parse_mode='html')


# ------------------------------–ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å—å------------------------------------------------

@dp.callback_query_handler(lambda c: c.data == 'buttonzapis', state=UserStates.USER_STATE_0)
async def process_callback_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(UserStates.all()[1])
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û.', )


# -------------------–í—ã–±–æ—Ä –¥–∞—Ç—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑------------------------------------------------

@dp.callback_query_handler(WMonthTelegramCalendar.func(), state=UserStates.USER_STATE_2)
async def inline_kb_answer_callback_handler(query):
    result, key, step = WMonthTelegramCalendar().process(query.data)
    arr_times = ['9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '‚ùå']
    if not result and key:
        await bot.edit_message_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                                    query.message.chat.id,
                                    query.message.message_id,
                                    reply_markup=key)
    elif result:
        today = int(datetime.datetime.now().strftime("%Y%m%d"))
        resultInt = int(str(result).replace("-", ""))
        if resultInt >= today:
            userC = user_state[query.from_user.id]
            userC.date = resultInt
            state = dp.current_state(user=query.from_user.id)

            sql_check = "SELECT * FROM users where date={}".format(userC.date)
            cursor.execute(sql_check)
            newlist = cursor.fetchall()
            markup = types.InlineKeyboardMarkup(row_width=3)
            if not newlist:
                print("–ó–¥–µ—Å—å –ø—É—Å—Ç–æ")
            else:
                for ellist in newlist:
                    for i in range(int(ellist[3]), int(ellist[4])):
                        arr_times[i] = '‚ùå'

            button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
                      types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
                      types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
                      types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
                      types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
                      types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
                      types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
                      types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
                      types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
            markup.add(*button)
            await state.set_state(UserStates.all()[3])
            await bot.send_message(query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result} \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞–ª–∞. ‚è∞",
                                   reply_markup=markup)
        else:
            await bot.send_message(query.from_user.id, "‚ùå –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ ‚ùå")
            calendar, step = WMonthTelegramCalendar().build()
            await bot.send_message(query.from_user.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=calendar)

#-----------------------------–ó–∞–ø—Ä–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞-----------------------------------------------

@dp.callback_query_handler(lambda c: c.data == '‚ùå', state='*')
async def first_test_state_case_met(message: types.Message):
    arr_times = ['9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '‚ùå']
    userC = user_state[message.from_user.id]
    sql_check = "SELECT * FROM users where date={}".format(userC.date)
    cursor.execute(sql_check)
    newlist = cursor.fetchall()
    for ellist in newlist:
        for i in range(int(ellist[3]), int(ellist[4])):
            arr_times[i] = '‚ùå'
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await bot.send_message(message.from_user.id, '‚ùó –ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É –æ–Ω–∞ –∂–µ –∫—Ä–∞—Å–Ω–∞—è ‚ùó',
                           reply_markup=markup)


# --------------–í–≤–æ–¥ —á–∞—Å–∞ –Ω–∞—á–∞–ª–∞-----------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[0], state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    arr_times[0] = '‚ùå'
    arr_times[8] = '17:00'
    userC = user_state[message.from_user.id]
    userC.timestart = 0
    state = dp.current_state(user=message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await state.set_state(UserStates.all()[4])
    await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞',
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[1], state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    arr_times[0] = '‚ùå'
    arr_times[1] = '‚ùå'
    arr_times[8] = '17:00'
    userC = user_state[message.from_user.id]
    userC.timestart = 1
    state = dp.current_state(user=message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await state.set_state(UserStates.all()[4])
    await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞',
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[2], state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    arr_times[0] = '‚ùå'
    arr_times[1] = '‚ùå'
    arr_times[2] = '‚ùå'
    arr_times[8] = '17:00'
    userC = user_state[message.from_user.id]
    userC.timestart = 2
    state = dp.current_state(user=message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await state.set_state(UserStates.all()[4])
    await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞',
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[3], state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    arr_times[0] = '‚ùå'
    arr_times[1] = '‚ùå'
    arr_times[2] = '‚ùå'
    arr_times[3] = '‚ùå'
    arr_times[8] = '17:00'
    userC = user_state[message.from_user.id]
    userC.timestart = 3
    state = dp.current_state(user=message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await state.set_state(UserStates.all()[4])
    await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞',
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[4], state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    arr_times[0] = '‚ùå'
    arr_times[1] = '‚ùå'
    arr_times[2] = '‚ùå'
    arr_times[3] = '‚ùå'
    arr_times[4] = '‚ùå'
    arr_times[8] = '17:00'
    userC = user_state[message.from_user.id]
    userC.timestart = 4
    state = dp.current_state(user=message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await state.set_state(UserStates.all()[4])
    await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞',
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[5], state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    arr_times[0] = '‚ùå'
    arr_times[1] = '‚ùå'
    arr_times[2] = '‚ùå'
    arr_times[3] = '‚ùå'
    arr_times[4] = '‚ùå'
    arr_times[5] = '‚ùå'
    arr_times[8] = '17:00'
    userC = user_state[message.from_user.id]
    userC.timestart = 5
    state = dp.current_state(user=message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await state.set_state(UserStates.all()[4])
    await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞',
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[6], state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    arr_times[0] = '‚ùå'
    arr_times[1] = '‚ùå'
    arr_times[2] = '‚ùå'
    arr_times[3] = '‚ùå'
    arr_times[4] = '‚ùå'
    arr_times[5] = '‚ùå'
    arr_times[6] = '‚ùå'
    arr_times[8] = '17:00'
    userC = user_state[message.from_user.id]
    userC.timestart = 6
    state = dp.current_state(user=message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await state.set_state(UserStates.all()[4])
    await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞',
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[7], state=UserStates.USER_STATE_3)
async def first_test_state_case_met(message: types.Message):
    arr_times[0] = '‚ùå'
    arr_times[1] = '‚ùå'
    arr_times[2] = '‚ùå'
    arr_times[3] = '‚ùå'
    arr_times[4] = '‚ùå'
    arr_times[5] = '‚ùå'
    arr_times[6] = '‚ùå'
    arr_times[7] = '‚ùå'
    arr_times[8] = '17:00'
    userC = user_state[message.from_user.id]
    userC.timestart = 5
    state = dp.current_state(user=message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
              types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
              types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
              types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
              types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
              types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
              types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
              types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
              types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
    markup.add(*button)
    await state.set_state(UserStates.all()[4])
    await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24—á. ‚è∞',
                           reply_markup=markup)


@dp.message_handler(commands=['1'], state='*')
async def start(message):
    sql = "SELECT * FROM users "
    cursor.execute(sql)
    data = cursor.fetchall()
    str_data = json.dumps(data)
    await bot.send_message(message.from_user.id, str_data)


@dp.message_handler(commands=['start'], state='*')
async def process_start_command(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(UserStates.all()[0])
    button = InlineKeyboardButton('–ü–æ—Å–º–æ—Ç–µ—Ä—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ', callback_data='buttontime')
    button2 = InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è üìù', callback_data='buttonzapis')
    kb = InlineKeyboardMarkup().add(button).add(button2)
    await bot.send_message(message.from_user.id,
                           "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–≠—Ç–æ –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ë–ù–ü –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.",
                           reply_markup=kb)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await bot.send_message(message.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–≠—Ç–æ –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ë–ù–ü –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n ")


# ------------–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø, –≤—ã–±–æ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã, –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É --------------------------

@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[1], state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    userC.timeend = 1
    await timeendfunc(message,userC)

@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[2], state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    userC.timeend = 2
    await timeendfunc(message,userC)

@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[3], state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    userC.timeend = 3
    await timeendfunc(message,userC)

@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[4], state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    userC.timeend = 4
    await timeendfunc(message,userC)

@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[5], state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    userC.timeend = 5
    await timeendfunc(message,userC)

@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[6], state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    userC.timeend = 6
    await timeendfunc(message,userC)

@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[7], state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    userC.timeend = 7
    await timeendfunc(message,userC)

@dp.callback_query_handler(lambda c: c.data == DEF_ARR_TIMES[8], state=UserStates.USER_STATE_4)
async def first_test_state_case_met(message: types.Message):
    userC = user_state[message.from_user.id]
    userC.timeend = 8
    await timeendfunc(message, userC)

async def timeendfunc(message,userC):
    sql_check = "SELECT * FROM users where date={}".format(userC.date)
    cursor.execute(sql_check)
    newlist = cursor.fetchall()
    if not newlist:
        print('–ü—É—Å—Ç–∞ 2')
        sql_insert = "INSERT INTO users VALUES ('{}', '{}', '{}', '{}','{}')".format(message.from_user.id,
                                                                                         userC.fullname,
                                                                                         userC.date, userC.timestart,
                                                                                         userC.timeend)
        cursor.execute(sql_insert)
        state = dp.current_state(user=message.from_user.id)
        dateOut = str(userC.date)
        dateOut = dateOut[:4] + '-' + dateOut[4:6] + '-' + dateOut[6:]
        await state.set_state(UserStates.all()[0])
        await bot.send_message(message.from_user.id,
            '{}, –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã {} c {} –¥–æ {}'.format(userC.fullname, dateOut, DEF_ARR_TIMES[userC.timestart], DEF_ARR_TIMES[userC.timeend]))
    else:
        chek = False
        for i in range(userC.timestart, userC.timeend - 1):
            for elem in newlist:
                if i == elem[3] or i == elem[4]:
                    chek = True
                    break
        if not chek:
            sql_insert = "INSERT INTO users VALUES ('{}', '{}', '{}', '{}','{}')".format(message.from_user.id,
                                                                                         userC.fullname,
                                                                                         userC.date,
                                                                                         userC.timestart,
                                                                                         userC.timeend)
            cursor.execute(sql_insert)
            state = dp.current_state(user=message.from_user.id)
            dateOut = str(userC.date)
            dateOut = dateOut[:4] + '-' + dateOut[4:6] + '-' + dateOut[6:]
            await state.set_state(UserStates.all()[0])
            await bot.send_message(message.from_user.id,
                                   '{}, –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã {} c {} –¥–æ {}'.format(userC.fullname, dateOut,
                                                                          DEF_ARR_TIMES[userC.timestart],
                                                                          DEF_ARR_TIMES[userC.timeend]))
        else:
            arr_times = DEF_ARR_TIMES
            for ellist in newlist:
                for i in range(int(ellist[3]), int(ellist[4])):
                    arr_times[i] = '‚ùå'
            state = dp.current_state(user=message.from_user.id)
            markup = types.InlineKeyboardMarkup(row_width=3)
            button = [types.InlineKeyboardButton(text=arr_times[0], callback_data=arr_times[0]),
                  types.InlineKeyboardButton(text=arr_times[1], callback_data=arr_times[1]),
                  types.InlineKeyboardButton(text=arr_times[2], callback_data=arr_times[2]),
                  types.InlineKeyboardButton(text=arr_times[3], callback_data=arr_times[3]),
                  types.InlineKeyboardButton(text=arr_times[4], callback_data=arr_times[4]),
                  types.InlineKeyboardButton(text=arr_times[5], callback_data=arr_times[5]),
                  types.InlineKeyboardButton(text=arr_times[6], callback_data=arr_times[6]),
                  types.InlineKeyboardButton(text=arr_times[7], callback_data=arr_times[7]),
                  types.InlineKeyboardButton(text=arr_times[8], callback_data=arr_times[8])]
            markup.add(*button)
            await state.set_state(UserStates.all()[3])
            await bot.send_message(message.from_user.id,'–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π', reply_markup=markup)



@dp.message_handler(state=UserStates.USER_STATE_1)
async def first_test_state_case_met(message: types.Message):
    user_state[message.from_user.id] = User()
    userC = user_state[message.from_user.id]
    userC.fullname = message.text
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(UserStates.all()[2])
    await message.reply('–°–ø–∞—Å–∏–±–æ, ' + message.text + '\n–¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É üìÖ', reply=False)
    calendar, step = WMonthTelegramCalendar().build()
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=calendar)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
